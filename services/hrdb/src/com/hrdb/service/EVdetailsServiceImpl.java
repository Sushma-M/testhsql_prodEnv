/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/

package com.hrdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.hrdb.*;


/**
 * ServiceImpl object for domain model class EVdetails.
 * @see com.hrdb.EVdetails
 */
@Service("hrdb.EVdetailsService")
public class EVdetailsServiceImpl implements EVdetailsService {


    private static final Logger LOGGER = LoggerFactory.getLogger(EVdetailsServiceImpl.class);

    @Autowired
    @Qualifier("hrdb.EVdetailsDao")
    private WMGenericDao<EVdetails, EVdetailsId> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<EVdetails, EVdetailsId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "hrdbTransactionManager")
     public Page<EVdetails> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }


    @Transactional(readOnly = true, value = "hrdbTransactionManager")
    @Override
    public Page<EVdetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all evdetailss");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "hrdbTransactionManager")
    @Override
    public Page<EVdetails> findAll(Pageable pageable) {
        LOGGER.debug("Finding all evdetailss");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "hrdbTransactionManager")
    @Override
    public EVdetails findById(EVdetailsId id) throws EntityNotFoundException {
        LOGGER.debug("Finding evdetails by id: {}" , id);
        EVdetails evdetails=this.wmGenericDao.findById(id);
        if(evdetails==null){
            LOGGER.debug("No evdetails found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return evdetails;
    }

    @Transactional(readOnly = true, value = "hrdbTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


