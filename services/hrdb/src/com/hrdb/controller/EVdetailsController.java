/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/

package com.hrdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.hrdb.service.EVdetailsService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;
import com.hrdb.*;
import com.hrdb.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class EVdetails.
 * @see com.hrdb.EVdetails
 */
@RestController(value = "Hrdb.EVdetailsController")
@RequestMapping("/hrdb/EVdetails")
@Api(description = "Exposes APIs to work with EVdetails resource.", value = "EVdetailsController")
public class EVdetailsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EVdetailsController.class);

    @Autowired
    @Qualifier("hrdb.EVdetailsService")
    private EVdetailsService eVdetailsService;

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setEVdetailsService(EVdetailsService service) {
        this.eVdetailsService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of EVdetails instances.")
    public Long countAllEVdetailss() {
        LOGGER.debug("counting EVdetailss");
        Long count = eVdetailsService.countAll();
        return count;
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the list of EVdetails instances.")
    public Page<EVdetails> getEVdetailss(Pageable pageable) {
        LOGGER.debug("Rendering EVdetailss list");
        return eVdetailsService.findAll(pageable);
    }

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the list of EVdetails instances matching the search criteria.")
    public Page<EVdetails> findEVdetailss(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering EVdetailss list");
        return eVdetailsService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the EVdetails instance associated with the given composite-id.")
    public EVdetails getEVdetails(@RequestParam(value = "firstname", required = true) String firstname, @RequestParam(value = "lastname", required = true) String lastname, @RequestParam(value = "budget", required = true) Integer budget, @RequestParam(value = "deptcode", required = true) String deptcode) throws EntityNotFoundException {
        EVdetailsId temp = new EVdetailsId();
        temp.setFirstname(firstname);
        temp.setLastname(lastname);
        temp.setBudget(budget);
        temp.setDeptcode(deptcode);
        LOGGER.debug("Getting EVdetails with id: {}", temp);
        EVdetails instance = eVdetailsService.findById(temp);
        LOGGER.debug("EVdetails details with id: {}", instance);
        return instance;
    }
}
